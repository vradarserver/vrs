// Copyright © 2012 onwards, Andrew Whewell
// All rights reserved.
//
// Redistribution and use of this software in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//    * Neither the name of the author nor the names of the program's contributors may be used to endorse or promote products derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OF THE SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

namespace VirtualRadar.Interface.ModeS
{
    /// <summary>
    /// The interface for objects that can decode a raw Mode-S downlink message sent by a transponder into the information
    /// carried by the Mode-S message. Note that this does not decode the content of extended squitter messages.
    /// </summary>
    /// <remarks>
    /// Implementations are not expected to be thread-safe.
    /// </remarks>
    public interface IModeSTranslator
    {
        /// <summary>
        /// Gets or sets the statistics to update when translating messages.
        /// </summary>
        ReceiverStatistics Statistics { get; set; }

        /// <summary>
        /// Converts the bytes passed across into a <see cref="ModeSMessage"/> object.
        /// </summary>
        /// <param name="rawMessage"></param>
        /// <param name="start">The offset into the array of the start of the packet. The length is implied from the packet type.</param>
        /// <param name="signalLevel">The signal level, if known. Null if not known.</param>
        /// <param name="isMlat">True if the message is known to have been generated by an MLAT receiver / servar, false otherwise.</param>
        /// <returns></returns>
        ModeSMessage Translate(byte[] rawMessage, int start, int? signalLevel, bool isMlat);
    }
}
